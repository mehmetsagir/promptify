name: üöÄ Automated Release & Notification

on:
  push:
    tags:
      - 'v*.*.*'  # Semantic versioning: v1.0.0, v2.1.3, etc.
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      send_notifications:
        description: 'Send push notifications to users'
        type: boolean
        default: true

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get tag name
      id: tag_name
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "TAG_NAME=latest" >> $GITHUB_OUTPUT
        fi
        echo "Tag name will be: ${GITHUB_REF#refs/tags/}"
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Build app (unsigned)
      run: |
        echo "Building Promptify..."
        xcodebuild -scheme Promptify \
                   -configuration Release \
                   -derivedDataPath build \
                   -destination 'platform=macOS' \
                   CODE_SIGN_IDENTITY="" \
                   CODE_SIGNING_REQUIRED=NO \
                   CODE_SIGNING_ALLOWED=NO \
                   ONLY_ACTIVE_ARCH=NO \
                   clean build
    
    - name: Verify build output
      run: |
        echo "Checking build output..."
        ls -la build/Build/Products/Release/
        if [ ! -d "build/Build/Products/Release/Promptify.app" ]; then
          echo "‚ùå Promptify.app not found!"
          exit 1
        fi
        echo "‚úÖ Promptify.app found"
        
    - name: Create DMG
      run: |
        # Create a temporary folder for DMG contents
        mkdir -p dmg-contents
        cp -r "build/Build/Products/Release/Promptify.app" dmg-contents/
        
        # Create Applications symlink
        ln -s /Applications dmg-contents/Applications
        
        # Create DMG with proper settings
        hdiutil create -volname "Promptify Installer" \
                       -srcfolder dmg-contents \
                       -ov -format UDZO \
                       -imagekey zlib-level=9 \
                       "Promptify-${{ steps.tag_name.outputs.TAG_NAME }}.dmg"
        
        # Verify DMG was created
        ls -la *.dmg
        echo "‚úÖ DMG created successfully"
        
    - name: Create ZIP archive
      run: |
        # Create ZIP archive as alternative download
        cd dmg-contents
        zip -r "../Promptify-${{ steps.tag_name.outputs.TAG_NAME }}.zip" Promptify.app
        cd ..
        echo "‚úÖ ZIP archive created"
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      if: startsWith(github.ref, 'refs/tags/')
      with:
        files: |
          ./Promptify-${{ steps.tag_name.outputs.TAG_NAME }}.dmg
          ./Promptify-${{ steps.tag_name.outputs.TAG_NAME }}.zip
        body: |
          ## Changes in this release
          - Auto-update system with in-app installation
          - Permission diagnostic and sync system
          - Enhanced notification system for updates
          - Settings migration and backup system
          - Improved code organization and modularity
          
          ## Installation
          1. Download the DMG file below
          2. Open it and drag Promptify.app to Applications folder
          3. Run the app and grant accessibility permissions when prompted
          4. Future updates will be available through the in-app update system
          
          ## Requirements
          - macOS 12.0 or later
          - OpenAI API key (get one from https://platform.openai.com)
          
          ## Auto-Update System
          This version includes a new auto-update system that allows users to update directly within the app without manual reinstallation.

    - name: Send Push Notifications
      if: startsWith(github.ref, 'refs/tags/') && inputs.send_notifications
      run: |
        echo "üîî Sending push notifications to users..."
        
        # Extract version from tag
        VERSION=${{ steps.tag_name.outputs.TAG_NAME }}
        VERSION_NUMBER=${VERSION#v}  # Remove 'v' prefix
        
        # Get download URLs from the release
        DMG_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/Promptify-${VERSION}.dmg"
        ZIP_URL="https://github.com/${{ github.repository }}/releases/download/${VERSION}/Promptify-${VERSION}.zip"
        
        # Notification payload
        NOTIFICATION_PAYLOAD=$(cat <<EOF
        {
          "title": "Promptify Update Available",
          "body": "Version ${VERSION_NUMBER} is now available with auto-update support",
          "version": "${VERSION_NUMBER}",
          "downloadUrl": "${DMG_URL}",
          "releaseUrl": "https://github.com/${{ github.repository }}/releases/tag/${VERSION}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
        )
        
        echo "Notification payload:"
        echo "$NOTIFICATION_PAYLOAD"
        
        # Send to webhook endpoints (if configured)
        if [ ! -z "${{ secrets.WEBHOOK_URL }}" ]; then
          echo "Sending to webhook endpoint..."
          curl -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_SECRET }}" \
            -d "$NOTIFICATION_PAYLOAD" \
            "${{ secrets.WEBHOOK_URL }}"
          echo "‚úÖ Webhook notification sent"
        else
          echo "‚ÑπÔ∏è No webhook URL configured, skipping push notifications"
        fi
        
        # Log notification for users who check manually
        echo "üì± Users will be notified through RemoteNotificationService polling"

    - name: Update Release Statistics
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "üìä Recording release statistics..."
        echo "Release: ${{ steps.tag_name.outputs.TAG_NAME }}"
        echo "Repository: ${{ github.repository }}"
        echo "Commit: ${{ github.sha }}"
        echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        echo "Workflow: ${{ github.run_id }}"